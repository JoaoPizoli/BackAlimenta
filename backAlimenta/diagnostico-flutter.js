/**
 * üîç Diagn√≥stico de Login para Flutter
 * Testa exatamente como o Flutter tentaria fazer login
 */

const axios = require('axios');

async function diagnosticoLoginFlutter() {
    const baseURL = 'http://127.0.0.1:3333';
    
    console.log('üîç === DIAGN√ìSTICO LOGIN FLUTTER ===\n');
    
    // Verificar se o servidor est√° rodando
    try {
        console.log('1Ô∏è‚É£ Verificando se servidor est√° rodando...');
        const healthResponse = await axios.get(`${baseURL}/health`);
        console.log('‚úÖ Servidor rodando! Status:', healthResponse.data);
    } catch (error) {
        console.log('‚ùå Servidor n√£o est√° rodando!');
        console.log('üí° Execute: npm start');
        return;
    }
    
    // Testar endpoint exato de login
    console.log('\n2Ô∏è‚É£ Testando endpoint de login do paciente...');
    
    const loginData = {
        email: 'maria@paciente.com',
        senha: '123456'
    };
    
    try {
        console.log('üì§ Enviando requisi√ß√£o:', JSON.stringify(loginData, null, 2));
        console.log('üîó URL:', `${baseURL}/paciente/login`);
        
        const response = await axios.post(`${baseURL}/paciente/login`, loginData, {
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });
        
        console.log('\n‚úÖ RESPOSTA DO SERVIDOR:');
        console.log('üìä Status:', response.status);
        console.log('üìã Headers:', JSON.stringify(response.headers, null, 2));
        console.log('üíæ Data:', JSON.stringify(response.data, null, 2));
        
        if (response.data && response.data.token) {
            console.log('\nüéâ LOGIN FUNCIONANDO!');
            console.log('üé´ Token encontrado:', response.data.token.substring(0, 30) + '...');
        } else {
            console.log('\n‚ö†Ô∏è Login retornou sucesso mas sem token!');
        }
        
    } catch (error) {
        console.log('\n‚ùå ERRO NO LOGIN:');
        console.log('üìä Status:', error.response?.status);
        console.log('üìã Mensagem:', error.response?.data);
        console.log('üîç Erro completo:', error.message);
        
        if (error.response?.status === 404) {
            console.log('\nüí° POSS√çVEL PROBLEMA: Endpoint n√£o encontrado');
            console.log('   Verifique se a rota /paciente/login existe');
        } else if (error.response?.status === 401) {
            console.log('\nüí° POSS√çVEL PROBLEMA: Credenciais inv√°lidas');
            console.log('   Verifique email e senha');
        } else if (error.response?.status === 500) {
            console.log('\nüí° POSS√çVEL PROBLEMA: Erro interno do servidor');
            console.log('   Verifique logs do servidor');
        } else if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° POSS√çVEL PROBLEMA: Servidor n√£o est√° rodando');
            console.log('   Execute: npm start');
        }
    }
    
    // Testar se existem outras rotas de login
    console.log('\n3Ô∏è‚É£ Testando rotas alternativas...');
    
    const rotasAlternativas = [
        '/auth/login-paciente',
        '/login/paciente',
        '/api/paciente/login'
    ];
    
    for (let rota of rotasAlternativas) {
        try {
            console.log(`üîç Testando: ${rota}`);
            const response = await axios.post(`${baseURL}${rota}`, loginData);
            console.log(`‚úÖ ${rota} funcionou!`);
            console.log('üìä Resposta:', JSON.stringify(response.data, null, 2));
        } catch (error) {
            console.log(`‚ùå ${rota} falhou: ${error.response?.status || error.message}`);
        }
    }
    
    // Verificar CORS
    console.log('\n4Ô∏è‚É£ Verificando CORS...');
    try {
        const response = await axios.options(`${baseURL}/paciente/login`);
        console.log('‚úÖ CORS OK');
        console.log('üìã Headers CORS:', {
            'Access-Control-Allow-Origin': response.headers['access-control-allow-origin'],
            'Access-Control-Allow-Methods': response.headers['access-control-allow-methods'],
            'Access-Control-Allow-Headers': response.headers['access-control-allow-headers']
        });
    } catch (error) {
        console.log('‚ö†Ô∏è CORS pode ter problemas:', error.message);
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üì± INFORMA√á√ïES PARA O FLUTTER');
    console.log('='.repeat(60));
    console.log('üîó URL Base: http://127.0.0.1:3333');
    console.log('üîó Endpoint Login: /paciente/login');
    console.log('üìß Email: maria@paciente.com');
    console.log('üîí Senha: 123456');
    console.log('');
    console.log('üìã Headers necess√°rios:');
    console.log('   Content-Type: application/json');
    console.log('');
    console.log('üìã Body JSON:');
    console.log('   {');
    console.log('     "email": "maria@paciente.com",');
    console.log('     "senha": "123456"');
    console.log('   }');
    console.log('='.repeat(60));
}

// Executa o diagn√≥stico
if (require.main === module) {
    diagnosticoLoginFlutter().catch(error => {
        console.error('‚ùå Erro fatal no diagn√≥stico:', error.message);
        process.exit(1);
    });
}

module.exports = diagnosticoLoginFlutter;
